{"version":3,"sources":["Components/AppContext.js","Components/Navbar.js","Components/CountryItem.js","Components/Sidebar.js","Components/CountryDisplay.js","Components/AppProvider.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","Navbar","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Fragment","Components_AppContext","Consumer","context","type","className","placeholder","onChange","e","filterFunc","target","Component","CountryItem","country","props","countries","alpha3Code","onClick","selectCountryFunc","name","subregion","CountryListSidebar","data","filter","search","length","toLowerCase","includes","map","index","src_Components_CountryItem","CountryDisplay","_this","selectCountry","region","translations","de","it","es","flag","src","alt","AppProvider","call","state","clickedCountry","innerText","setState","inputValue","_this2","fetch","then","resp","json","catch","error","console","Provider","children","App","_React$Component","AppProvider_AppProvider","src_Components_Navbar","Components_Sidebar","src_Components_CountryDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33f3a5a1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AppContext = React.createContext();\nexport default AppContext;\n","import React, { Component } from \"react\";\nimport \"./Navbar.css\";\nimport AppContext from \"./AppContext\";\nexport class Navbar extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <nav>\n          <AppContext.Consumer>\n            {context => {\n              return (\n                <input\n                  type=\"search\"\n                  className=\"country-search-input\"\n                  placeholder=\"Search\"\n                  onChange={e => context.filterFunc(e.target.value)}\n                />\n              );\n            }}\n          </AppContext.Consumer>\n          <div className=\"dropdown\">\n            <button className=\"dropbtn\">Language: EN</button>\n          </div>\n        </nav>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport AppContext from \"./AppContext\";\nimport \"./CountryItem.css\";\n\nexport class CountryItem extends Component {\n  render() {\n    const { country } = this.props;\n    let filteredCountries = this.props.countries;\n    return (\n      <React.Fragment>\n        <AppContext.Consumer>\n          {context => {\n            return (\n              <li key={country.alpha3Code}>\n                <h4\n                  onClick={context.selectCountryFunc}\n                  className=\"sidebar-countryname\"\n                >\n                  {country.name}\n                </h4>\n                <p>\n                  {country.subregion ? (\n                    country.subregion\n                  ) : (\n                    <span>No subregion</span>\n                  )}\n                </p>\n              </li>\n            );\n          }}\n        </AppContext.Consumer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CountryItem;\n","import React, { Component } from \"react\";\nimport \"./Sidebar.css\";\nimport CountryItem from \"./CountryItem\";\nimport AppContext from \"./AppContext\";\n\nexport class CountryListSidebar extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"country-list-container\">\n          <ul>\n            <AppContext.Consumer>\n              {context =>\n                context.data &&\n                context.data.filter(country => {\n                  if (context.search.length === 0) return true;\n                  return country.name\n                    .toLowerCase()\n                    .includes(context.search.toLowerCase());\n                }).map((country, index) => (\n                  <CountryItem country={country} key={index} />\n                ))\n              }\n            </AppContext.Consumer>\n          </ul>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CountryListSidebar;\n","import React, { Component } from \"react\";\nimport \"./CountryDisplay.css\";\nimport AppContext from \"./AppContext\";\nexport class CountryDisplay extends Component {\n  render() {\n    return (\n      <div className=\"country-display\">\n        <div className=\"country-display-container\" key={this.props.index}>\n          <AppContext.Consumer>\n            {context => {\n              return (\n                <div className=\"country-disp-text\">\n                  {context.selectCountry.name && (\n                    <div>\n                      <h3>{context.selectCountry.name}</h3>\n                      <p>\n                        {context.selectCountry.region} -{\" \"}\n                        {context.selectCountry.subregion}\n                      </p>\n                    </div>\n                  )}\n                  {context.selectCountry.translations && (\n                    <div>\n                      <p>DE: {context.selectCountry.translations.de}</p>\n                      <p>IT: {context.selectCountry.translations.it}</p>\n                      <p>ES: {context.selectCountry.translations.es}</p>\n                    </div>\n                  )}\n                  <div>\n                    {context.selectCountry.flag && (\n                      <img\n                        src={context.selectCountry.flag}\n                        className=\"country-disp-img\"\n                        key={this.props.index}\n                        alt=\"country flag\"\n                      />\n                    )}\n                  </div>\n                </div>\n              );\n            }}\n          </AppContext.Consumer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CountryDisplay;\n","import React from \"react\";\nimport AppContext from \"./AppContext\";\nexport default class AppProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      selectCountry: {},\n      selectCountryFunc: e => {\n        // innerText = the country name in countryItem\n        const clickedCountry = e.target.innerText;\n        const filter = this.state.data.filter(\n          country => country.name === clickedCountry\n        );\n        this.setState({ selectCountry: filter[0] });\n      },\n      search: \"\",\n      filterFunc: inputValue => {\n        this.setState({ search: inputValue });\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(resp => resp.json())\n      .then(data => this.setState({ data }))\n      .catch(error => console.error);\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./Components/Navbar\";\nimport Sidebar from \"./Components/Sidebar\";\nimport CountryDisplay from \"./Components/CountryDisplay\";\nimport AppProvider from \"./Components/AppProvider\";\n\nexport class App extends React.Component {\n  \n  render() {\n    return (\n      <AppProvider>\n        <React.Fragment>\n          <Navbar />\n          <div className=\"country-components-container\">\n            <Sidebar />\n            <CountryDisplay />\n          </div>\n        </React.Fragment>\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}